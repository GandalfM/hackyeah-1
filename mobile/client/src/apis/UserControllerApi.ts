// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserExcludingId,
    UserExcludingIdFromJSON,
    UserExcludingIdToJSON,
    UserPartial,
    UserPartialFromJSON,
    UserPartialToJSON,
} from '../models';

export interface UserControllerCountRequest {
    where?: object;
}

export interface UserControllerCreateRequest {
    userExcludingId?: UserExcludingId;
}

export interface UserControllerDeleteByIdRequest {
    id: string;
}

export interface UserControllerFindRequest {
    filter?: object;
}

export interface UserControllerFindByIdRequest {
    id: string;
}

export interface UserControllerReplaceByIdRequest {
    id: string;
    user?: User;
}

export interface UserControllerUpdateAllRequest {
    where?: object;
    userPartial?: UserPartial;
}

export interface UserControllerUpdateByIdRequest {
    id: string;
    userPartial?: UserPartial;
}

/**
 * no description
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async userControllerCountRaw(requestParameters: UserControllerCountRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

   /**
    */
    async userControllerCount(requestParameters: UserControllerCountRequest): Promise<InlineResponse2001> {
        const response = await this.userControllerCountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userControllerCreateRaw(requestParameters: UserControllerCreateRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserExcludingIdToJSON(requestParameters.userExcludingId),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

   /**
    */
    async userControllerCreate(requestParameters: UserControllerCreateRequest): Promise<User> {
        const response = await this.userControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userControllerDeleteByIdRaw(requestParameters: UserControllerDeleteByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerDeleteById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    */
    async userControllerDeleteById(requestParameters: UserControllerDeleteByIdRequest): Promise<void> {
        await this.userControllerDeleteByIdRaw(requestParameters);
    }

    /**
     */
    async userControllerFindRaw(requestParameters: UserControllerFindRequest): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

   /**
    */
    async userControllerFind(requestParameters: UserControllerFindRequest): Promise<Array<User>> {
        const response = await this.userControllerFindRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userControllerFindByIdRaw(requestParameters: UserControllerFindByIdRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerFindById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

   /**
    */
    async userControllerFindById(requestParameters: UserControllerFindByIdRequest): Promise<User> {
        const response = await this.userControllerFindByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userControllerReplaceByIdRaw(requestParameters: UserControllerReplaceByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerReplaceById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    */
    async userControllerReplaceById(requestParameters: UserControllerReplaceByIdRequest): Promise<void> {
        await this.userControllerReplaceByIdRaw(requestParameters);
    }

    /**
     */
    async userControllerUpdateAllRaw(requestParameters: UserControllerUpdateAllRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPartialToJSON(requestParameters.userPartial),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

   /**
    */
    async userControllerUpdateAll(requestParameters: UserControllerUpdateAllRequest): Promise<InlineResponse2001> {
        const response = await this.userControllerUpdateAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userControllerUpdateByIdRaw(requestParameters: UserControllerUpdateByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerUpdateById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPartialToJSON(requestParameters.userPartial),
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    */
    async userControllerUpdateById(requestParameters: UserControllerUpdateByIdRequest): Promise<void> {
        await this.userControllerUpdateByIdRaw(requestParameters);
    }

}
